{
    0   // 5 0 1
    1
    rot  // 0 1 5
    {    // 0 1 5 { swap 1+ tuck * }
        swap
        1+
        tuck   // == swap over
        *
    }
    swap // 0 1 { swap 1+ tuck * } 5
    times
    nip // 0 1 5

} : fact

5 fact .

// 1. 0 1           1 1         2 2         3 6         4 24
// 2. 1 0           1 1         2 2         6 3         24 4
// 3. 1 1           1 2         2 3         6 4         24 5
// 4. 1 1 1         2 1 2       3 2 3       4 6 4       24 5 24
// 5. 1 1           2 2         3 6         4 24        24 120

{ 
    0   // 6 0 1
    1 
    rot  // 0 1 6
    {   // 0 1 6 { tuck + }
        tuck 
        + 
    } 
    swap // 0 1 { tuck + } 6
    times 
    nip // 0 1 6

} : fibo

6 fibo .

// 1. 0 1
// 2. 1 0 1
// 3. 1 1

// 0 1 1 2 3 5 8 13 ..
// 1 1 2 3 5 8 13 ..
// 1 2 3 5 8 13 ..

// Hashmap

variable items
dictnew items ! // created items dictionary

variable key
-1 key ! // created key

{ // b{10001}
    <b // b{10001}, b
        swap // b, b{10001}
        s, // b'
        key // b', p(box)
        1+! // b'
        key // b', p(box)
        @ // b', key
        items // b', key, p(box)
        @ // b', key, items
        64 // b', key, items, 64
    b>udict!+ // items', -1
    drop
    items // items', p(box)
    ! // stack is empty

} : add-item

b{10001} add-item





{ 
    ?dup 
    { 
        dup 
        1- 
        @â€™ 
        fact 
        * 
    } 
    
    { 1 } cond 

} : fact

5 fact .

// 1. 5 5
// 2. 5 5 5
// 3. 5 5 4
// 4. 5 5 fact 4 *
// 5. 5 120

  
// (b x --> b')

{ -1 { 1+ 2dup 8 * ufits } until
  rot over 4 u, -rot 8 * u, } : Gram,

<b
    1 Gram,
b>




{ 
    1 // 1000 1
    0  // 1000 1 0
    rot  // 1 0 1000
    { 
        -rot // 1000 1 0
        over // 1000 1 0 1
        +    // 1000 1 1
        swap // 1000 1 1
        rot  // 1 1 1000
        2dup // 1 1 1000 1 1000
        >=   // 1 1 1000 0
    } 

    until // continues execution because of 0
    drop  // 1 1 1000

} : fib-gtr

1000 fib-gtr

// Addr,
// Gram,